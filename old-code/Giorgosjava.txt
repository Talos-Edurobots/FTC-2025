package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;


@TeleOp




public class Giorgosjava extends LinearOpMode{ 
    private DcMotor leftMotor;
    private DcMotor rightMotor;
    private DcMotor armRight;
    private DcMotor armLeft;
    //private double drive;
  static final double  COUNTS_PER_MOTOR_REV = 28 ;
  static final double  DRIVE_GEAR_REDUCTION = 18.28 ;
  static final double  WHELL_CIRCUMFERENCE_NM =90 * 3.14;
  
  
   static final double  COUNTS_PER_WHEEL_REV =  COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION ;
   static final double  COUNTS_PER_NM   = COUNTS_PER_WHEEL_REV / WHELL_CIRCUMFERENCE_NM;
    
  int leftTarget = (int)(610 * COUNTS_PER_NM);
  int rightTarget = (int)(610 * COUNTS_PER_NM); 
  
  


 @Override 
 
 
 public void runOpMode() {
     
    double  y ;
    double  x ;
     
      armLeft = hardwareMap.get(DcMotor.class,"armLeft");
      armRight = hardwareMap.get(DcMotor.class,"armRight");
     leftMotor = hardwareMap.get(DcMotor.class,"leftDrive");
     rightMotor = hardwareMap.get(DcMotor.class,"rightDrive");
     rightMotor.setDirection(DcMotor.Direction.REVERSE);
     rightMotor.setDirection(DcMotor.Direction.FORWARD);

    //leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    //rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
   
   telemetry.addData("Status", "Initialized");
   telemetry.update();
   
     waitForStart();

  
  leftMotor.setTargetPosition(leftTarget);
  rightMotor.setTargetPosition(rightTarget);
   
   leftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
   rightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

   
  
 while (opModeIsActive() ) { 
   x = gamepad1.right_stick_x;
   y = -gamepad1.right_stick_y;
 
 
  rightMotor.setPower(y-x);
  leftMotor.setPower(y+x);
 
 
 
 
 
       if (gamepad1.right_bumper){
              // armLeft.setPower(0.2);
              //  armRight.setPower(-0.2);
            }    
            else if (gamepad1.left_bumper){
               // armRight.setPower(0.2);
              // armLeft.setPower(-0.2);
            } 
            
            else {
                armLeft.setPower(0);
                armRight.setPower(0);
            }    
            

   telemetry.addData("Status", "Running");
   telemetry.update();
  
 }
  
  
 }

          
    
}